{"version":3,"sources":["common/ResizableInputTable/ResizableTable.tsx","JointProbability/JointProbability.tsx","CovarianceMatrix/CovarianceMatrix.tsx","App.tsx","index.tsx"],"names":["ResizableTable","cellGenerator","square","setSize","constWidth","constHeight","useState","width","setWidth","height","setHeight","className","type","value","onInput","e","newWidth","Math","max","parseInt","target","newHeight","Array","fill","map","row","y","col","x","JointProbability","values","setValues","expectedValue","expectedValueX","expectedValueY","varianceX","varianceY","densityX","densityY","xChance","parseFloat","push","yChance","covariance","betaYToX","alphaYToX","betaXToY","alphaXToY","onChange","newValues","w","h","toFixed","sqrt","abs","CovarianceMatrix","LETTERS","split","expectedValues","setExpectedValues","size","covariances","val","xLetter","yLetter","App","to","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAYaA,G,MAAiB,SAAC,GAAsE,IAArEC,EAAoE,EAApEA,cAAeC,EAAqD,EAArDA,OAAQC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,YAAwB,EACxEC,mBAAS,GAD+D,mBAC3FC,EAD2F,KACpFC,EADoF,OAEtEF,mBAAS,GAF6D,mBAE3FG,EAF2F,KAEnFC,EAFmF,KAGhG,OACI,sBAAKC,UAAU,sBAAf,UACKP,EAAa,KAAO,CAAC,+BAAOF,EAAS,WAAU,qBAAsB,uBAAOU,KAAK,SAASC,MAAON,EACvBO,QAAS,SAAAC,GACL,IAAIC,EAAWC,KAAKC,IAAI,EAAGC,SAAUJ,EAAEK,OAA4BP,QACnEL,EAASQ,GACTb,EAAQ,CAACa,EAAUP,OAChB,wBAC/EJ,GAAgBH,EAML,KANe,CAAC,iDAAyB,uBAAOU,KAAK,SAASC,MAAOJ,EACvCK,QAAS,SAAAC,GACL,IAAIM,EAAYJ,KAAKC,IAAI,EAAGC,SAAUJ,EAAEK,OAA4BP,QACpEH,EAAUW,GACVlB,EAAQ,CAACI,EAAOc,OAE5D,wBACJ,gCACI,gCAEIC,MAAMpB,EAASK,EAAQ,EAAIF,GAA4BI,EAAS,GAAGc,KAAK,GAAGC,KAAI,SAACC,EAAKC,GACjF,OAAO,6BAECJ,MAAMlB,GAA0BG,EAAQ,GAAGgB,KAAK,GAAGC,KAAI,SAACG,EAAKC,GACzD,OAAO,6BACF3B,EAAc2B,EAAGF,IADNE,OAHZF,eC/B3BG,EAAmB,WAW5B,IAXmC,IAAD,EACRvB,mBAAS,CAAC,CAAC,MADH,mBAC7BwB,EAD6B,KACrBC,EADqB,KAE9BC,EAAgB,EAChBC,EAAiB,EACjBC,EAAiB,EACjBC,EAAY,EACZC,EAAY,EACZC,EAAqB,GACrBC,EAAqB,GARS,EASVhC,mBAAS,GATC,mBAS7BC,EAT6B,KAStBC,EATsB,OAURF,mBAAS,GAVD,mBAU7BG,EAV6B,KAUrBC,EAVqB,KAWzBkB,EAAI,EAAGA,EAAIrB,EAAOqB,IAAK,CACC,qBAAlBE,EAAOF,EAAI,KAClBE,EAAOF,EAAI,GAAK,IAGpB,IADA,IAAIW,EAAU,EACLb,EAAI,EAAGA,EAAIjB,EAAQiB,IACY,qBAAzBI,EAAOF,EAAI,GAAGF,EAAI,KACzBI,EAAOF,EAAI,GAAGF,EAAI,GAAK,KAEK,qBAArBI,EAAOF,EAAI,GAAG,KACrBE,EAAOF,EAAI,GAAG,GAAK,KAES,qBAArBE,EAAO,GAAGJ,EAAI,KACrBI,EAAO,GAAGJ,EAAI,GAAK,KAEvBa,GAAWC,WAAWV,EAAOF,EAAI,GAAGF,EAAI,IACxCM,GAAiBQ,WAAWV,EAAOF,EAAI,GAAG,IAAMY,WAAWV,EAAO,GAAGJ,EAAI,IAAMc,WAAWV,EAAOF,EAAI,GAAGF,EAAI,IAEhHW,EAASI,KAAKF,GACdN,GAAkBO,WAAWV,EAAOF,EAAI,GAAG,IAAMW,EAErD,IAAK,IAAIX,EAAI,EAAGA,EAAIrB,EAAOqB,IACvBO,GAAa,SAACK,WAAWV,EAAOF,EAAI,GAAG,IAAMK,EAAmB,GAAII,EAAST,GAEjF,IAAK,IAAIF,EAAI,EAAGA,EAAIjB,EAAQiB,IAAK,CAE7B,IADA,IAAIgB,EAAU,EACLd,EAAI,EAAGA,EAAIrB,EAAOqB,IACvBc,GAAWF,WAAWV,EAAOF,EAAI,GAAGF,EAAI,IAE5CY,EAASG,KAAKC,GACdR,GAAkBM,WAAWV,EAAO,GAAGJ,EAAI,IAAMgB,EAErD,IAAK,IAAIhB,EAAI,EAAGA,EAAIjB,EAAQiB,IACxBU,GAAa,SAACI,WAAWV,EAAO,GAAGJ,EAAI,IAAMQ,EAAmB,GAAII,EAASZ,GAEjF,IAAIiB,EAAaX,EAAgBC,EAAiBC,EAC9CU,EAAWD,EAAaR,EACxBU,EAAYX,EAAiBS,EAAaR,EAAYF,EACtDa,EAAWH,EAAaP,EACxBW,EAAYd,EAAiBU,EAAaP,EAAYF,EAC1D,OACI,sBAAKvB,UAAU,oBAAf,UACI,cAAC,EAAD,CAAgBV,cAAe,SAAC2B,EAAGF,GAC/B,OAAU,IAANE,GAAiB,IAANF,EACH,yCAEiB,qBAAdI,EAAOF,KACdE,EAAOF,GAAK,IAEY,qBAAjBE,EAAOF,GAAGF,KACjBI,EAAOF,GAAGF,GAAK,KAEX,uBAAOd,KAAK,SAASC,MAAOiB,EAAOF,GAAGF,GAAIsB,SAAU,SAAAjC,GACxD,IAAIkC,EAAY,YAAInB,GAAQN,KAAI,SAAAC,GAAG,mBAAQA,MAC3CwB,EAAUrB,GAAGF,GAAKX,EAAEK,OAAOP,MAC3BkB,EAAUkB,QAGnB/C,QAAQ,EAAOC,QAAS,YAAa,IAAD,mBAAV+C,EAAU,KAAPC,EAAO,KACnC3C,EAAS0C,GACTxC,EAAUyC,IACX/C,WAAY,EAAGC,YAAa,IAC/B,2CAAc4B,EAAemB,QAAQ,MAAU,uBAC/C,2CAAclB,EAAekB,QAAQ,MAAU,uBAC/C,4CAAepB,EAAcoB,QAAQ,MAAU,uBAC/C,gDAAmBT,EAAWS,QAAQ,MAAU,uBAChD,iDAAmB,oCAAnB,SAAsCjB,EAAUiB,QAAQ,MAAU,uBAClE,iDAAmB,oCAAnB,SAAsChB,EAAUgB,QAAQ,MAAU,uBAClE,2CAAcnC,KAAKoC,KAAKlB,GAAWiB,QAAQ,MAAU,uBACrD,2CAAcnC,KAAKoC,KAAKjB,GAAWgB,QAAQ,MAAU,uBACrD,kDAAqBT,EAAa1B,KAAKoC,KAAKlB,EAAYC,IAAYgB,QAAQ,MAAU,uBACtF,+BAAQnC,KAAKqC,IAAIX,GAAc,KAAS,uBAAsB,uBAAyB,uBACvF,oFAAiDC,EAASQ,QAAQ,GAAlE,OAA0EP,EAAUO,QAAQ,MAAU,uBACtG,oFAAiDN,EAASM,QAAQ,GAAlE,OAA0EL,EAAUK,QAAQ,MAAU,2BCpFrGG,EAAmB,WAO5B,IANA,IAAMC,EAAU,kBAAkBC,MAAM,IADN,EAGRnD,mBAAS,CAAC,CAAC,OAHH,mBAG7BwB,EAH6B,KAGrBC,EAHqB,OAIQzB,mBAAS,CAAC,MAJlB,mBAI7BoD,EAJ6B,KAIbC,EAJa,OAKZrD,mBAAS,GALG,mBAK7BsD,EAL6B,KAKvBzD,EALuB,KAM9B0D,EAAc,CAAC,CAAC,IACXjC,EAAI,EAAGA,EAAIgC,EAAMhC,IAAK,CAC3BiC,EAAYjC,GAAK,GACZE,EAAOF,EAAI,KACZE,EAAOF,EAAI,GAAK,IACpB,IAAK,IAAIF,EAAI,EAAGA,EAAIkC,EAAMlC,IACtBmC,EAAYjC,GAAGF,GAAKI,EAAOF,EAAI,GAAGF,EAAI,GAAKc,WAAWV,EAAOF,EAAI,GAAGF,EAAI,IAAM,EAGtF,OAAQ,sBAAKf,UAAU,oBAAf,UACJ,0DAAgC,uBAChC,cAAC,EAAD,CAAgBV,cAAe,SAAC2B,EAAGF,GAC/B,OAAU,IAANE,GAAiB,IAANF,EACH,yBACK,IAANE,EACC,+BAAO4B,EAAQ9B,EAAI,KACd,IAANA,EACC,+BAAO8B,EAAQ5B,EAAI,MAEF,qBAAdE,EAAOF,KACdE,EAAOF,GAAK,IAEY,qBAAjBE,EAAOF,GAAGF,KACjBI,EAAOF,GAAGF,GAAK,KAEX,uBAAOd,KAAK,SAASC,MAAOiB,EAAOF,GAAGF,GAAIsB,SAAU,SAAAjC,GACxD,IAAIkC,EAAY,YAAInB,GAAQN,KAAI,SAAAC,GAAG,mBAAQA,MAC3CwB,EAAUrB,GAAGF,GAAKX,EAAEK,OAAOP,MAC3BkB,EAAUkB,QAGnB/C,QAAQ,EAAMC,QAAS,mCAAE+C,EAAF,iBAAY/C,EAAQ+C,IAAI9C,WAAY,EAAGC,YAAa,IAAK,uBACnF,qEAAkC,uBAClC,cAAC,EAAD,CAAgBJ,cAAe,SAAC2B,EAAGF,GAC/B,OAAU,IAANE,EACQ,+BAAO4B,EAAQ9B,MAEM,qBAAtBgC,EAAehC,KACtBgC,EAAehC,GAAK,KAEhB,uBAAOd,KAAK,SAASC,MAAO6C,EAAehC,GAAIsB,SAAU,SAAAjC,GAC7D,IAAIkC,EAAS,YAAOS,GACpBT,EAAUvB,GAAKX,EAAEK,OAAOP,MACxB8C,EAAkBV,QAEvB/C,QAAQ,EAAOC,QAAS,aACxBC,WAAY,EAAGC,YAAauD,IAC9BC,EAAYrC,KAAI,SAACG,EAAKC,GACnB,OAAOD,EAAIH,KAAI,SAACsC,EAAKpC,GACjB,IAAMqC,EAAUP,EAAQ5B,GAClBoC,EAAUR,EAAQ9B,GACxB,MAAO,CACFE,IAAMF,EAAM,qCAAO,oCAAP,IAAqBqC,EAArB,UAA4C,KACzD,wCAAWA,EAAX,KAAsBC,EAAtB,UACA,+BAAOF,IACP,uBACClC,IAAMF,EACH,yCAAYqC,EAAZ,KAAuBC,EAAvB,QAAqCH,EAAYjC,GAAGF,GAAKT,KAAKoC,KAAKQ,EAAYjC,GAAGA,GAAKiC,EAAYnC,GAAGA,KAAK0B,QAAQ,MAAa,KACnIxB,IAAMF,EAAK,uBAAS,KACpBE,IAAMF,EACH,sCAASqC,EAASC,EAAlB,QAAgCH,EAAYjC,GAAGF,GAAKc,WAAWkB,EAAe9B,IAAMY,WAAWkB,EAAehC,KAAK0B,QAAQ,MAAa,KAC3IxB,IAAMF,EAAK,uBAAS,KACpBE,IAAMF,EACH,iCAAOqC,EAAP,YAAyBC,EAAzB,iCAA6DH,EAAYjC,GAAGF,GAAKmC,EAAYnC,GAAGA,IAAI0B,QAAQ,GAAIY,EAAhH,OAA6HxB,WAAWkB,EAAe9B,IAAMiC,EAAYjC,GAAGF,GAAKc,WAAWkB,EAAehC,IAAMmC,EAAYnC,GAAGA,IAAI0B,QAAQ,MAAa,KAC5PxB,IAAMF,EAAK,uBAAS,gBC1C1BuC,EAzBH,WACR,OACI,cAAC,IAAD,UACI,sBAAKtD,UAAU,MAAf,UACI,+BACI,6BACI,cAAC,IAAD,CAAMuD,GAAG,qBAAT,uCAEJ,6BACI,cAAC,IAAD,CAAMA,GAAG,qBAAT,wCAGR,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,qBAAZ,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,qBAAZ,SACI,cAAC,EAAD,eClBxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9f6c4387.chunk.js","sourcesContent":["import React, {ReactElement, useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./ResizableTable.css\";\r\n\r\ntype Props = {\r\n    cellGenerator: (x: number, y: number) => ReactElement,\r\n    square: boolean,\r\n    setSize: (size: [number, number]) => void,\r\n    constWidth: number | undefined,\r\n    constHeight: number | undefined\r\n}\r\n\r\nexport const ResizableTable = ({cellGenerator, square, setSize, constWidth, constHeight}: Props) => {\r\n    let [width, setWidth] = useState(2);\r\n    let [height, setHeight] = useState(2);\r\n    return (\r\n        <div className=\"resizableInputTable\">\r\n            {constWidth ? null : [<span>{square ? \"Méret\" : \"Szélesség:\"}</span>, <input type=\"number\" value={width}\r\n                                                                                       onInput={e => {\r\n                                                                                           let newWidth = Math.max(2, parseInt((e.target as HTMLInputElement).value));\r\n                                                                                           setWidth(newWidth);\r\n                                                                                           setSize([newWidth, height]);\r\n                                                                                       }} />, <br />]}\r\n            {(!constHeight && !square) ? [<span>Magasság: </span>, <input type=\"number\" value={height}\r\n                                                        onInput={e => {\r\n                                                            let newHeight = Math.max(2, parseInt((e.target as HTMLInputElement).value));\r\n                                                            setHeight(newHeight);\r\n                                                            setSize([width, newHeight]);\r\n                                                        }} />,\r\n                <br />] : null}\r\n            <table>\r\n                <tbody>\r\n                {\r\n                    Array(square ? width + 1 : constHeight ? constHeight : height + 1).fill(0).map((row, y) => {\r\n                        return <tr key={y}>\r\n                            {\r\n                                Array(constWidth ? constWidth : width + 1).fill(0).map((col, x) => {\r\n                                    return <td key={x}>\r\n                                        {cellGenerator(x, y)}\r\n                                    </td>\r\n                                })\r\n                            }\r\n                        </tr>\r\n                    })\r\n                }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nResizableTable.propTypes = {\r\n    cellGenerator: PropTypes.func.isRequired,\r\n    square: PropTypes.bool.isRequired,\r\n    setSize: PropTypes.func.isRequired\r\n}","import React, {useState} from 'react';\r\nimport {ResizableTable} from \"../common/ResizableInputTable/ResizableTable\";\r\n\r\nexport const JointProbability = () => {\r\n    let [values, setValues] = useState([[\"\"]]);\r\n    let expectedValue = 0;\r\n    let expectedValueX = 0;\r\n    let expectedValueY = 0;\r\n    let varianceX = 0;\r\n    let varianceY = 0;\r\n    let densityX: number[] = [];\r\n    let densityY: number[] = [];\r\n    let [width, setWidth] = useState(2);\r\n    let [height, setHeight] = useState(2)\r\n    for (let x = 0; x < width; x++) {\r\n        if (typeof values[x + 1] === \"undefined\") {\r\n            values[x + 1] = [];\r\n        }\r\n        let xChance = 0;\r\n        for (let y = 0; y < height; y++) {\r\n            if (typeof values[x + 1][y + 1] === \"undefined\") {\r\n                values[x + 1][y + 1] = \"0\";\r\n            }\r\n            if (typeof values[x + 1][0] === \"undefined\") {\r\n                values[x + 1][0] = \"0\";\r\n            }\r\n            if (typeof values[0][y + 1] === \"undefined\") {\r\n                values[0][y + 1] = \"0\";\r\n            }\r\n            xChance += parseFloat(values[x + 1][y + 1]);\r\n            expectedValue += parseFloat(values[x + 1][0]) * parseFloat(values[0][y + 1]) * parseFloat(values[x + 1][y + 1]);\r\n        }\r\n        densityX.push(xChance);\r\n        expectedValueX += parseFloat(values[x + 1][0]) * xChance;\r\n    }\r\n    for (let x = 0; x < width; x++) {\r\n        varianceX += (parseFloat(values[x + 1][0]) - expectedValueX) ** 2 * densityX[x];\r\n    }\r\n    for (let y = 0; y < height; y++) {\r\n        let yChance = 0;\r\n        for (let x = 0; x < width; x++) {\r\n            yChance += parseFloat(values[x + 1][y + 1]);\r\n        }\r\n        densityY.push(yChance);\r\n        expectedValueY += parseFloat(values[0][y + 1]) * yChance;\r\n    }\r\n    for (let y = 0; y < height; y++) {\r\n        varianceY += (parseFloat(values[0][y + 1]) - expectedValueY) ** 2 * densityY[y];\r\n    }\r\n    let covariance = expectedValue - expectedValueX * expectedValueY;\r\n    let betaYToX = covariance / varianceX;\r\n    let alphaYToX = expectedValueY - covariance / varianceX * expectedValueX;\r\n    let betaXToY = covariance / varianceY;\r\n    let alphaXToY = expectedValueX - covariance / varianceY * expectedValueY;\r\n    return (\r\n        <div className=\"joint-probability\">\r\n            <ResizableTable cellGenerator={(x, y) => {\r\n                if (x === 0 && y === 0) {\r\n                    return (<span>Y\\X</span>);\r\n                } else {\r\n                    if (typeof values[x] === \"undefined\") {\r\n                        values[x] = [];\r\n                    }\r\n                    if (typeof values[x][y] === \"undefined\") {\r\n                        values[x][y] = \"0\";\r\n                    }\r\n                    return (<input type=\"number\" value={values[x][y]} onChange={e => {\r\n                        let newValues = [...values].map(row => [...row]);\r\n                        newValues[x][y] = e.target.value;\r\n                        setValues(newValues);\r\n                    }}/>);\r\n                }\r\n            }} square={false} setSize={([w, h]) => {\r\n                setWidth(w);\r\n                setHeight(h);\r\n            }} constWidth={0} constHeight={0}/>\r\n            <span>E(X) = {expectedValueX.toFixed(4)}</span><br/>\r\n            <span>E(Y) = {expectedValueY.toFixed(4)}</span><br/>\r\n            <span>E(XY) = {expectedValue.toFixed(4)}</span><br/>\r\n            <span>cov(X, Y) = {covariance.toFixed(4)}</span><br/>\r\n            <span>cov(X, X) = D<sup>2</sup>(X) = {varianceX.toFixed(4)}</span><br/>\r\n            <span>cov(Y, Y) = D<sup>2</sup>(Y) = {varianceY.toFixed(4)}</span><br/>\r\n            <span>D(X) = {Math.sqrt(varianceX).toFixed(4)}</span><br/>\r\n            <span>D(Y) = {Math.sqrt(varianceY).toFixed(4)}</span><br/>\r\n            <span>corr(X, Y) = {(covariance / Math.sqrt(varianceX * varianceY)).toFixed(4)}</span><br/>\r\n            <span>{(Math.abs(covariance) < 0.001) ? \"Lehet függetlenek\" : \"Nem függetlenek\"}</span><br />\r\n            <span>Y-nak az X-re vett lineáris regressziója: {betaYToX.toFixed(4)}X + {alphaYToX.toFixed(4)}</span><br />\r\n            <span>X-nek az Y-ra vett lineáris regressziója: {betaXToY.toFixed(4)}Y + {alphaXToY.toFixed(4)}</span><br />\r\n        </div>\r\n    )\r\n};","import React, {useState} from \"react\";\r\nimport {ResizableTable} from \"../common/ResizableInputTable/ResizableTable\";\r\n\r\nexport const CovarianceMatrix = () => {\r\n    const LETTERS = \"XYZABCDEFGHJKLM\".split(\"\");\r\n    \r\n    let [values, setValues] = useState([[\"0\"]]);\r\n    let [expectedValues, setExpectedValues] = useState([\"0\"]);\r\n    let [size, setSize] = useState(2);\r\n    let covariances = [[0]];\r\n    for (let x = 0; x < size; x++) {\r\n        covariances[x] = [];\r\n        if (!values[x + 1])\r\n            values[x + 1] = [];\r\n        for (let y = 0; y < size; y++) {\r\n            covariances[x][y] = values[x + 1][y + 1] ? parseFloat(values[x + 1][y + 1]) : 0;\r\n        }\r\n    }\r\n    return (<div className=\"covariance-matrix\">\r\n        <span>Kovariancia mátrix:</span><br />\r\n        <ResizableTable cellGenerator={(x, y) => {\r\n            if (x === 0 && y === 0) {\r\n                return (<span />);\r\n            } else if (x === 0) {\r\n                return (<span>{LETTERS[y - 1]}</span>);\r\n            } else if (y === 0) {\r\n                return (<span>{LETTERS[x - 1]}</span>);\r\n            } else {\r\n                if (typeof values[x] === \"undefined\") {\r\n                    values[x] = [];\r\n                }\r\n                if (typeof values[x][y] === \"undefined\") {\r\n                    values[x][y] = \"0\";\r\n                }\r\n                return (<input type=\"number\" value={values[x][y]} onChange={e => {\r\n                    let newValues = [...values].map(row => [...row]);\r\n                    newValues[x][y] = e.target.value;\r\n                    setValues(newValues);\r\n                }} />);\r\n            }\r\n        }} square={true} setSize={([w, _]) => setSize(w)} constWidth={0} constHeight={0} /><br />\r\n        <span>Várható érték vektor:</span><br />\r\n        <ResizableTable cellGenerator={(x, y) => {\r\n            if (x === 0) {\r\n                return (<span>{LETTERS[y]}</span>);\r\n            }\r\n            if (typeof expectedValues[y] === \"undefined\") {\r\n                expectedValues[y] = \"0\";\r\n            }\r\n            return (<input type=\"number\" value={expectedValues[y]} onChange={e => {\r\n                let newValues = [...expectedValues];\r\n                newValues[y] = e.target.value;\r\n                setExpectedValues(newValues);\r\n            }} />);\r\n        }} square={false} setSize={() => {\r\n        }} constWidth={2} constHeight={size} />\r\n        {covariances.map((col, x) => {\r\n            return col.map((val, y) => {\r\n                const xLetter = LETTERS[x];\r\n                const yLetter = LETTERS[y];\r\n                return [\r\n                    (x === y) ? (<span>D<sup>2</sup>({xLetter}) = </span>) : null,\r\n                    <span>cov({xLetter}, {yLetter}) = </span>,\r\n                    <span>{val}</span>,\r\n                    <br />,\r\n                    (x !== y) ?\r\n                        <span>corr({xLetter}, {yLetter}) = {(covariances[x][y] / Math.sqrt(covariances[x][x] * covariances[y][y])).toFixed(4)}</span> : null,\r\n                    (x !== y) ? <br /> : null,\r\n                    (x !== y) ?\r\n                        <span>E({xLetter}{yLetter}) = {(covariances[x][y] - parseFloat(expectedValues[x]) * parseFloat(expectedValues[y])).toFixed(4)}</span> : null,\r\n                    (x !== y) ? <br /> : null,\r\n                    (x !== y) ?\r\n                        <span>{xLetter}-nak/nek {yLetter}-ra/re vett regressziója: {(covariances[x][y] / covariances[y][y]).toFixed(4)}{yLetter} + {(parseFloat(expectedValues[x]) - covariances[x][y] * parseFloat(expectedValues[y]) / covariances[y][y]).toFixed(4)}</span> : null,\r\n                    (x !== y) ? <br /> : null\r\n                ]\r\n            });\r\n        })}\r\n    </div>);\r\n}","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Link, Route, Switch} from \"react-router-dom\";\nimport {JointProbability} from \"./JointProbability/JointProbability\";\nimport {CovarianceMatrix} from \"./CovarianceMatrix/CovarianceMatrix\";\n\nconst App = () => {\n    return (\n        <Router>\n            <div className=\"app\">\n                <ul>\n                    <li>\n                        <Link to=\"/joint-probability\">Együttes eloszlás</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/covariance-matrix\">Kovariancia mátrix</Link>\n                    </li>\n                </ul>\n                <Switch>\n                    <Route path=\"/joint-probability\">\n                        <JointProbability />\n                    </Route>\n                    <Route path=\"/covariance-matrix\">\n                        <CovarianceMatrix />\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}